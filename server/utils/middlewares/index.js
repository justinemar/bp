const jwt = require('jsonwebtoken');
const nodemailer = require('nodemailer');
const multer = require('multer');
const AccountHelper = require('../lib');
const Account = require('../../models/Account');

const storage = multer.memoryStorage();
const upload = multer({ storage }).fields([{ name: 'photo', maxCount: 1 }, { name: 'cover', maxCount: 1 }]);
const uploadArray = multer({ storage }).array('image', 12);
require('dotenv').config();


module.exports = {


    sendVerification: (req, res) => {
        const email = req.params.email ? req.params.email : req.body.email;
        const verification_token = AccountHelper.setToken({ email });
        const transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
              user: process.env.EMAIL,
              pass: process.env.GPWD,
            },
          });
        const mailOptions = {
            from: process.env.EMAIL,
            to: email,
            subject: 'BIDA Account Verification',
            text: `
            Dear BIDA user,

            We are pleased that you have chosen to secure your email ${email}

            By verifying the email address associated with your BIDA account, you enable a higher level of account security.

            Please click the link below to complete the verification process.

            ${process.env.HOST}verifyEmail/${verification_token}

            This message was generated by BIDA
            `,
        };

        transporter.sendMail(mailOptions, (error, info) => {
            if (error) {
              console.log(`${error}something strange...`);
            }

            if (info) {
                res.json({
                    message: 'An email containing your verfication link has been sent',
                    type: 'success',
                    code: 200,
                });
            }
          });
    },

    verifyEmail: (req, res, next) => {
        jwt.verify(req.params.token, process.env.KEY1, (err, decoded) => {
            if (err) {
                res.status(401).json({
                    message: 'Invalid or expired verification link',
                    type: 'error',
                    code: 401,
                });
            }

            if (decoded) {
                Account.updateOne({ user_email: decoded.email }, { $set: { verified: true } })
                .exec((err, user) => {
                    if (err) {
                        res.status(500).json({ message: 'Internal Server Error', type: 'error' });
                    }

                    if (user) {
                        res.status(200).json({
                            message: 'Email is now verified',
                            type: 'success',
                            code: 200,
                        });
                    }
                });
            }
        });
    },

    checkUser: (req, res, next) => {
        Account.findOne({ $or: [{ user_email: req.body.email }, { display_name: req.body.name }] })
        .exec((err, user) => {
            if (err) {
                res.status(500).json({ message: 'Internal Server Error', type: 'error' });
            }

            if (user) {
                res.json({
                    message: `${user.user_email === req.body.email ? 'Email' : 'Display Name'
                      } is already taken`,
                    type: 'error',
                });
            } else {
                next();
            }
        });
    },

    verifyToken: (req, res, next) => {
        const token = req.headers.authorization.slice(7 - req.headers.authorization.length);
        jwt.verify(token, process.env.KEY1, (err, decoded) => {
            if (err) {
                res.status(401).json({
                    message: 'Your session has expired, please login to continue where you left off',
                    type: 'error',
                    code: 401,
                });
            }

            if (decoded) {
                next();
            }
        });
    },

    checkUserStatus: (req, res, next) => {
        Account.findOne({ user_email: req.body.email })
        .exec((err, user) => {
            if (err) {
                res.status(500).json({ message: 'Internal Server Error', type: 'error' });
            }

            if (user && !user.verified) {
                res.json({
                    message: 'Please confirm your email',
                    type: 'error',
                    code: 403,
                });
            } else if (user) {
                next();
            } else {
                res.json({
                    message: "We can't find an account associated with this email",
                    type: 'error',
                });
            }
        });
    },

    upload: (req, res, next) => {
        upload(req, res, (err) => {
            if (err) {
              console.log(err);
            }
            next();
          });
    },


    uploadArray: (req, res, next) => {
        uploadArray(req, res, (err) => {
            if (err) {
                console.log(err);
            }
            next();
        });
    },
};
